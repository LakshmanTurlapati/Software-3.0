{
  "instructions": "This Python script implements an efficient Fibonacci sequence generator using iterative algorithms. The Fibonacci sequence is a mathematical series where each number is the sum of the two preceding ones, starting with 0 and 1 (0, 1, 1, 2, 3, 5, 8, 13, 21, 34...). The implementation includes functions to generate the first n Fibonacci numbers, find numbers up to a maximum value, locate the nth Fibonacci number, and check if a given number belongs to the sequence. It uses O(n) time complexity with constant space for computation, making it efficient for large numbers. The script also includes mathematical analysis features like golden ratio convergence testing and performance benchmarking, along with comprehensive error handling and validation.",
  "code": "#!/usr/bin/env python3\n\"\"\"\nFibonacci Sequence Generator\n\nThis module provides efficient functions to generate Fibonacci sequences\nusing iterative algorithms for optimal performance.\n\nAuthor: Software 3.0 Demo\nDate: 2025-08-02\n\"\"\"\n\ndef fibonacci_sequence(n):\n    \"\"\"\n    Generate the first n numbers in the Fibonacci sequence.\n    \n    The Fibonacci sequence starts with 0 and 1, where each subsequent\n    number is the sum of the two preceding ones.\n    \n    Args:\n        n (int): Number of Fibonacci numbers to generate (must be >= 0)\n        \n    Returns:\n        list: List containing the first n Fibonacci numbers\n        \n    Raises:\n        ValueError: If n is negative\n        TypeError: If n is not an integer\n        \n    Examples:\n        >>> fibonacci_sequence(5)\n        [0, 1, 1, 2, 3]\n        \n        >>> fibonacci_sequence(10)\n        [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\n    \"\"\"\n    # Input validation\n    if not isinstance(n, int):\n        raise TypeError(\"n must be an integer\")\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    \n    # Handle edge cases\n    if n == 0:\n        return []\n    elif n == 1:\n        return [0]\n    elif n == 2:\n        return [0, 1]\n    \n    # Initialize the sequence with first two numbers\n    sequence = [0, 1]\n    \n    # Generate remaining numbers iteratively\n    a, b = 0, 1\n    for i in range(2, n):\n        next_fib = a + b\n        sequence.append(next_fib)\n        a, b = b, next_fib  # Move window forward\n    \n    return sequence\n\n\ndef fibonacci_up_to(max_value):\n    \"\"\"\n    Generate Fibonacci numbers up to a specified maximum value.\n    \n    Args:\n        max_value (int): Maximum value for Fibonacci numbers (must be >= 0)\n        \n    Returns:\n        list: List of Fibonacci numbers not exceeding max_value\n        \n    Raises:\n        ValueError: If max_value is negative\n        TypeError: If max_value is not a number\n        \n    Examples:\n        >>> fibonacci_up_to(10)\n        [0, 1, 1, 2, 3, 5, 8]\n        \n        >>> fibonacci_up_to(100)\n        [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]\n    \"\"\"\n    # Input validation\n    if not isinstance(max_value, (int, float)):\n        raise TypeError(\"max_value must be a number\")\n    if max_value < 0:\n        raise ValueError(\"max_value must be non-negative\")\n    \n    # Handle edge case\n    if max_value < 0:\n        return []\n    \n    sequence = []\n    a, b = 0, 1\n    \n    # Generate sequence while numbers don't exceed max_value\n    while a <= max_value:\n        sequence.append(a)\n        a, b = b, a + b\n    \n    return sequence\n\n\ndef find_nth_fibonacci(n):\n    \"\"\"\n    Find the nth Fibonacci number (0-indexed).\n    \n    Args:\n        n (int): Position in sequence (0-indexed, must be >= 0)\n        \n    Returns:\n        int: The nth Fibonacci number\n        \n    Examples:\n        >>> find_nth_fibonacci(5)\n        5\n        \n        >>> find_nth_fibonacci(10)\n        55\n    \"\"\"\n    if not isinstance(n, int):\n        raise TypeError(\"n must be an integer\")\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    \n    if n <= 1:\n        return n\n    \n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    \n    return b\n\n\ndef is_fibonacci_number(num):\n    \"\"\"\n    Check if a number is a Fibonacci number.\n    \n    A positive integer is a Fibonacci number if and only if\n    one of (5*n^2 + 4) or (5*n^2 - 4) is a perfect square.\n    \n    Args:\n        num (int): Number to check\n        \n    Returns:\n        bool: True if num is a Fibonacci number, False otherwise\n        \n    Examples:\n        >>> is_fibonacci_number(8)\n        True\n        \n        >>> is_fibonacci_number(10)\n        False\n    \"\"\"\n    if num < 0:\n        return False\n    \n    def is_perfect_square(n):\n        if n < 0:\n            return False\n        root = int(n ** 0.5)\n        return root * root == n\n    \n    # Check the mathematical property of Fibonacci numbers\n    return (is_perfect_square(5 * num * num + 4) or \n            is_perfect_square(5 * num * num - 4))\n\n\ndef main():\n    \"\"\"\n    Demonstration of Fibonacci functions with various examples.\n    \"\"\"\n    print(\"=\" * 50)\n    print(\"    FIBONACCI SEQUENCE GENERATOR DEMO\")\n    print(\"=\" * 50)\n    \n    # Demo 1: Generate first n numbers\n    print(\"\\n1. Generate first 10 Fibonacci numbers:\")\n    result = fibonacci_sequence(10)\n    print(f\"   Result: {result}\")\n    \n    # Demo 2: Generate numbers up to limit\n    print(\"\\n2. Generate Fibonacci numbers up to 100:\")\n    result = fibonacci_up_to(100)\n    print(f\"   Result: {result}\")\n    \n    # Demo 3: Find specific Fibonacci number\n    print(\"\\n3. Find the 15th Fibonacci number (0-indexed):\")\n    result = find_nth_fibonacci(15)\n    print(f\"   F(15) = {result}\")\n    \n    # Demo 4: Check if numbers are Fibonacci numbers\n    print(\"\\n4. Check if numbers are Fibonacci numbers:\")\n    test_numbers = [8, 10, 13, 20, 21, 34, 50, 55, 89]\n    for num in test_numbers:\n        is_fib = is_fibonacci_number(num)\n        status = \"Yes\" if is_fib else \"No\"\n        print(f\"   Is {num} a Fibonacci number? {status}\")\n    \n    # Demo 5: Performance comparison\n    print(\"\\n5. Performance test - Generate first 30 numbers:\")\n    import time\n    \n    start_time = time.time()\n    large_sequence = fibonacci_sequence(30)\n    end_time = time.time()\n    \n    print(f\"   Generated {len(large_sequence)} numbers\")\n    print(f\"   Last few numbers: {large_sequence[-5:]}\")\n    print(f\"   Execution time: {(end_time - start_time) * 1000:.3f} ms\")\n    \n    print(\"\\n\" + \"=\" * 50)\n    print(\"              DEMO COMPLETE\")\n    print(\"=\" * 50)\n\n\nif __name__ == \"__main__\":\n    # Run the demonstration\n    main()\n    \n    # Interactive mode (uncomment to enable)\n    # print(\"\\nInteractive mode:\")\n    # while True:\n    #     try:\n    #         user_input = input(\"Enter number of Fibonacci numbers to generate (or 'quit'): \")\n    #         if user_input.lower() == 'quit':\n    #             break\n    #         n = int(user_input)\n    #         result = fibonacci_sequence(n)\n    #         print(f\"First {n} Fibonacci numbers: {result}\")\n    #     except (ValueError, KeyboardInterrupt):\n    #         print(\"Invalid input or interrupted. Exiting...\")\n    #         break"
}