{
  "instructions": "This Python demonstration showcases the Software 3 extension's capability to handle Python code with proper syntax highlighting and language detection. The implementation includes a configuration management system using dataclasses, an extension manager class with language detection capabilities, and asynchronous file processing methods. The code demonstrates modern Python features including type hints, decorators, async/await patterns, list and dictionary comprehensions, f-strings, context managers, and exception handling. The language detection algorithm analyzes code patterns to automatically identify Python, JavaScript, or other programming languages, enabling appropriate syntax highlighting in the VS Code environment.",
  "code": "#!/usr/bin/env python3\n\"\"\"Software 3 Extension Manager - Python Implementation\n\nDemonstrates language detection and syntax highlighting capabilities.\n\"\"\"\n\nimport asyncio\nimport json\nfrom typing import List, Dict, Optional, Union\nfrom dataclasses import dataclass\nfrom pathlib import Path\n\n\n@dataclass\nclass Software3Config:\n    \"\"\"Configuration for Software 3 extension features.\"\"\"\n    \n    name: str\n    version: str\n    features: List[str]\n    enabled: bool = True\n    \n    def __post_init__(self):\n        if not self.features:\n            self.features = ['syntax-highlighting', 'language-detection']\n\n\nclass ExtensionManager:\n    \"\"\"Manages Software 3 extension functionality.\"\"\"\n    \n    def __init__(self, config: Software3Config):\n        self.config = config\n        self._cache: Dict[str, any] = {}\n        \n    @property\n    def is_enabled(self) -> bool:\n        \"\"\"Check if extension is enabled.\"\"\"\n        return self.config.enabled\n    \n    @staticmethod\n    def detect_language(code: str) -> str:\n        \"\"\"Detect programming language from code content.\"\"\"\n        # Python detection patterns\n        python_patterns = [\n            'def ', 'import ', 'from ', 'print(',\n            'class ', '__init__', 'self.', 'async def'\n        ]\n        \n        if any(pattern in code for pattern in python_patterns):\n            return 'python'\n        \n        # JavaScript patterns\n        js_patterns = ['function ', 'const ', 'let ', 'console.log']\n        if any(pattern in code for pattern in js_patterns):\n            return 'javascript'\n            \n        return 'text'\n    \n    def process_file(self, file_path: Union[str, Path]) -> Dict[str, any]:\n        \"\"\"Process a Software 3 file and return metadata.\"\"\"\n        path = Path(file_path)\n        \n        if not path.exists():\n            raise FileNotFoundError(f\"File not found: {path}\")\n            \n        try:\n            with open(path, 'r', encoding='utf-8') as f:\n                content = json.load(f)\n                \n            # Extract and analyze code\n            code = content.get('code', '')\n            detected_lang = self.detect_language(code)\n            \n            return {\n                'file': str(path),\n                'language': detected_lang,\n                'instructions_length': len(content.get('instructions', '')),\n                'code_lines': len(code.split('\\n')),\n                'features_used': self.config.features\n            }\n            \n        except json.JSONDecodeError as e:\n            raise ValueError(f\"Invalid JSON in {path}: {e}\")\n    \n    async def batch_process(self, files: List[Path]) -> List[Dict[str, any]]:\n        \"\"\"Process multiple files asynchronously.\"\"\"\n        tasks = [self._process_async(file) for file in files]\n        results = await asyncio.gather(*tasks, return_exceptions=True)\n        \n        # Filter out exceptions and return successful results\n        return [r for r in results if not isinstance(r, Exception)]\n    \n    async def _process_async(self, file_path: Path) -> Dict[str, any]:\n        \"\"\"Async wrapper for file processing.\"\"\"\n        return await asyncio.to_thread(self.process_file, file_path)\n\n\ndef create_demo_config() -> Software3Config:\n    \"\"\"Create a demo configuration.\"\"\"\n    return Software3Config(\n        name=\"software3-enhanced\",\n        version=\"1.1.8\",\n        features=[\n            \"Syntax Highlighting\",\n            \"Language Detection\",\n            \"Custom Editor\",\n            \"Text Editor Mode\",\n            \"JSON Validation\"\n        ]\n    )\n\n\ndef main():\n    \"\"\"Main demonstration function.\"\"\"\n    # Create configuration\n    config = create_demo_config()\n    manager = ExtensionManager(config)\n    \n    print(f\"Software 3 Extension Manager\")\n    print(f\"Version: {config.version}\")\n    print(f\"Status: {'Enabled' if manager.is_enabled else 'Disabled'}\")\n    print(f\"\\nFeatures:\")\n    for feature in config.features:\n        print(f\"  - {feature}\")\n    \n    # Demonstrate language detection\n    test_snippets = [\n        (\"def hello(): pass\", \"Python\"),\n        (\"function test() { return true; }\", \"JavaScript\"),\n        (\"SELECT * FROM users;\", \"SQL\")\n    ]\n    \n    print(\"\\nLanguage Detection Tests:\")\n    for code, expected in test_snippets:\n        detected = manager.detect_language(code)\n        status = \"✓\" if detected.lower() in expected.lower() else \"✗\"\n        print(f\"  {status} {expected}: detected as {detected}\")\n    \n    # Feature statistics using comprehensions\n    feature_lengths = {feature: len(feature) for feature in config.features}\n    avg_length = sum(feature_lengths.values()) / len(feature_lengths)\n    \n    print(f\"\\nFeature Statistics:\")\n    print(f\"  Total features: {len(config.features)}\")\n    print(f\"  Average name length: {avg_length:.1f} characters\")\n    print(f\"  Longest feature: {max(feature_lengths, key=feature_lengths.get)}\")\n    \n    # Demonstrate file operations with error handling\n    test_file = Path(\"test_s3_file.s3\")\n    test_content = {\n        \"instructions\": \"Test file for demonstration\",\n        \"code\": \"print('Hello, Software 3!')\"\n    }\n    \n    try:\n        # Write test file\n        with open(test_file, 'w') as f:\n            json.dump(test_content, f, indent=2)\n        \n        # Process the file\n        result = manager.process_file(test_file)\n        print(f\"\\nFile Processing Result:\")\n        for key, value in result.items():\n            print(f\"  {key}: {value}\")\n            \n    except Exception as e:\n        print(f\"Error during file processing: {e}\")\n    finally:\n        # Clean up test file if it exists\n        if test_file.exists():\n            test_file.unlink()\n            print(\"\\nTest file cleaned up.\")\n\n\nif __name__ == \"__main__\":\n    # Run the main demonstration\n    main()\n    \n    # Example of async usage (commented for demonstration)\n    # async def async_demo():\n    #     config = create_demo_config()\n    #     manager = ExtensionManager(config)\n    #     files = [Path(\"file1.s3\"), Path(\"file2.s3\")]\n    #     results = await manager.batch_process(files)\n    #     print(f\"Processed {len(results)} files\")\n    # \n    # asyncio.run(async_demo())"
}