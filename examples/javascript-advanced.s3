{
  "instructions": "This advanced JavaScript example demonstrates modern JavaScript features and the Software 3 extension's enhanced capabilities. The implementation showcases ES6+ features including classes, async/await, destructuring, arrow functions, template literals, and error handling. The extension provides automatic language detection using pattern matching algorithms, VS Code-style syntax highlighting with proper token colorization, and seamless integration with the VS Code environment. The code demonstrates object-oriented programming patterns, asynchronous operations, functional programming concepts, and modern JavaScript best practices, all rendered with appropriate syntax highlighting that matches the VS Code theme for a consistent development experience.",
  "code": "// Advanced JavaScript Features Demonstration\nconsole.log('Software 3 Extension - Advanced JavaScript');\n\n/**\n * Software3Enhancement class demonstrates OOP patterns\n * and modern JavaScript features with syntax highlighting\n */\nclass Software3Enhancement {\n  constructor(version = '1.1.8') {\n    this.version = version;\n    this.features = new Map([\n      ['icons', 'FontAwesome integration'],\n      ['detection', 'Automatic language detection'],\n      ['highlighting', 'VS Code syntax highlighting'],\n      ['editor', 'Custom editor with dual view']\n    ]);\n    this.statistics = {\n      filesProcessed: 0,\n      languagesDetected: new Set()\n    };\n  }\n  \n  // Getter with computed property\n  get featureCount() {\n    return this.features.size;\n  }\n  \n  // Method using modern syntax\n  async processFile(filePath) {\n    try {\n      // Simulated async file processing\n      const result = await this.simulateAsyncOperation(filePath);\n      \n      // Destructuring and spread operator\n      const { language, ...metadata } = result;\n      \n      // Update statistics\n      this.statistics.filesProcessed++;\n      this.statistics.languagesDetected.add(language);\n      \n      // Template literal with expression\n      return {\n        success: true,\n        message: `Processed ${filePath} as ${language}`,\n        metadata,\n        timestamp: new Date().toISOString()\n      };\n      \n    } catch (error) {\n      // Error handling with optional chaining\n      console.error(`Error processing file: ${error?.message || 'Unknown error'}`);\n      throw new Error(`Failed to process: ${filePath}`);\n    }\n  }\n  \n  // Private method simulation (convention)\n  async simulateAsyncOperation(path) {\n    return new Promise((resolve) => {\n      setTimeout(() => {\n        // Detect language based on extension\n        const extension = path.split('.').pop();\n        const languageMap = {\n          js: 'javascript',\n          py: 'python',\n          ts: 'typescript',\n          s3: 'software3'\n        };\n        \n        resolve({\n          language: languageMap[extension] || 'text',\n          size: Math.floor(Math.random() * 10000),\n          lines: Math.floor(Math.random() * 500)\n        });\n      }, 100);\n    });\n  }\n  \n  // Generator function example\n  *generateFeatures() {\n    for (const [key, value] of this.features) {\n      yield { id: key, description: value };\n    }\n  }\n  \n  // Static factory method\n  static createDefault() {\n    return new Software3Enhancement('1.1.8');\n  }\n}\n\n// Functional programming with arrow functions\nconst processMultipleFiles = async (files) => {\n  const enhancer = Software3Enhancement.createDefault();\n  \n  // Promise.all for parallel processing\n  const results = await Promise.all(\n    files.map(file => enhancer.processFile(file))\n  );\n  \n  // Array methods chaining\n  const summary = results\n    .filter(r => r.success)\n    .map(r => r.message)\n    .join('\\n');\n  \n  return summary;\n};\n\n// Destructuring with default values\nconst analyzeCode = ({ code = '', language = 'auto' } = {}) => {\n  // Regular expression for pattern matching\n  const patterns = [\n    { regex: /\\bfunction\\b|\\bconst\\b|\\blet\\b/, lang: 'javascript' },\n    { regex: /\\bdef\\b|\\bimport\\b|\\bclass\\b/, lang: 'python' },\n    { regex: /\\binterface\\b|\\bnamespace\\b/, lang: 'typescript' }\n  ];\n  \n  // Find matching pattern\n  const detected = patterns.find(p => p.regex.test(code));\n  \n  return {\n    detectedLanguage: detected?.lang || language,\n    hasCode: code.length > 0,\n    lineCount: code.split('\\n').length\n  };\n};\n\n// Module pattern with IIFE\nconst Software3Module = (() => {\n  // Private variables\n  let instanceCount = 0;\n  \n  // Public API\n  return {\n    createInstance: () => {\n      instanceCount++;\n      return Software3Enhancement.createDefault();\n    },\n    getInstanceCount: () => instanceCount,\n    resetCount: () => { instanceCount = 0; }\n  };\n})();\n\n// Example usage\n(async () => {\n  console.log('Starting Software 3 Advanced Demo...');\n  \n  // Create instance\n  const enhancer = Software3Module.createInstance();\n  \n  // Use generator\n  console.log('Features:');\n  for (const feature of enhancer.generateFeatures()) {\n    console.log(`- ${feature.id}: ${feature.description}`);\n  }\n  \n  // Process files\n  const testFiles = ['example.js', 'test.py', 'demo.s3'];\n  const summary = await processMultipleFiles(testFiles);\n  console.log('\\nProcessing Summary:');\n  console.log(summary);\n  \n  // Analyze code\n  const analysis = analyzeCode({\n    code: 'const x = 42; function test() { return x; }'\n  });\n  console.log('\\nCode Analysis:', analysis);\n  \n  console.log(`\\nTotal instances created: ${Software3Module.getInstanceCount()}`);\n})();"
}